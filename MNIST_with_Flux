### A Pluto.jl notebook ###
# v0.14.5

using Markdown
using InteractiveUtils

# ╔═╡ 24fc0350-b075-11eb-2b87-3b27ae8f9ca9
begin
	import Pkg
    cd("C:\\Users\\augus\\Documents\\dev_Julia\\nnfs")
	Pkg.activate(".")
	#pwd()
end

# ╔═╡ 2e451f4d-bffe-44aa-829c-96fbb7710832
using Flux, Flux.Data.MNIST, Images

# ╔═╡ b142ec07-b624-4a41-bdc4-92ab829d597b
using PlutoUI

# ╔═╡ 5968d9ac-ee95-40a5-8d01-6090f6106715
md"### Preparando os dados"

# ╔═╡ 8d52bcfd-1435-4570-8a26-a3d580b11fd5
begin
	labels = MNIST.labels();
	images = MNIST.images();
	
	images[1:5];
end

# ╔═╡ 229f0d4a-c9ea-4bb8-b2cb-654f50e4f93c
Float64.(images[1])

# ╔═╡ 60159128-6d03-41bc-9a9d-1033a2d0e59c
begin
	n_inp = unique(length.(images))[];
	n_out = length(unique(labels));
	(n_inp = n_inp, n_out = n_out)
end

# ╔═╡ a8d19132-b161-49dd-8566-da8025900b26
( labels = sort(unique(labels)), n = length(unique(labels)) )

# ╔═╡ b4bc821d-72ae-4e08-9cb7-d5059f5023ba
getpixelnumber(img) = Float64.(img)[:]

# ╔═╡ 2110605a-fe20-4d46-b1fe-0e11f65d16e2
begin
	x = getpixelnumber.(images[1:5000])
	y = [ Flux.onehot(label[1], 0:9) for label in labels[1:5000] ]
	(x = x, y = y)
end

# ╔═╡ 9d26745d-8f1b-4124-8e0d-d4cb372d24da
function batch(r)
	x = [ getpixelnumber(img) for img in images[r] ]
	y = [ Flux.onehot(label, 0:9) for label in labels[r] ]
	return (Flux.batch(x), Flux.batch(y))
end

# ╔═╡ d988e0be-7dfe-43cc-ab43-8e70d7bec4e6
trainbatch = batch(1:5000)

# ╔═╡ 90a17cd2-e013-43d4-bb5b-3161645f9d54
md"#### Criando a Rede Neural"

# ╔═╡ a1c2a4c5-0482-4154-98d1-b3c0069879c4
begin
	# 784 inputs and 10 outputs with softmax 
	model = Chain(Dense(n_inp, n_out, identity), softmax)
	L(x,y) = Flux.Losses.crossentropy(model(x),y)
	opt = Flux.Descent(0.1)
	θ = params(model)
	Flux.train!(L, θ, [trainbatch], opt)
end

# ╔═╡ 75182139-2fe9-409b-bea7-aa413acfb776
begin
	 function callback()
		println(L(trainbatch...))
	end

	Flux.train!(L, θ, Iterators.repeated(trainbatch, 10), opt)
	L(trainbatch...)
end

# ╔═╡ 821d6df7-6597-48e0-9899-c28df62a5ce6
begin
	Flux.train!(L, θ, Iterators.repeated(trainbatch, 10), opt)
	L(trainbatch...)
end

# ╔═╡ Cell order:
# ╟─5968d9ac-ee95-40a5-8d01-6090f6106715
# ╠═2e451f4d-bffe-44aa-829c-96fbb7710832
# ╠═8d52bcfd-1435-4570-8a26-a3d580b11fd5
# ╠═229f0d4a-c9ea-4bb8-b2cb-654f50e4f93c
# ╠═60159128-6d03-41bc-9a9d-1033a2d0e59c
# ╠═a8d19132-b161-49dd-8566-da8025900b26
# ╠═b4bc821d-72ae-4e08-9cb7-d5059f5023ba
# ╠═2110605a-fe20-4d46-b1fe-0e11f65d16e2
# ╠═9d26745d-8f1b-4124-8e0d-d4cb372d24da
# ╠═d988e0be-7dfe-43cc-ab43-8e70d7bec4e6
# ╟─90a17cd2-e013-43d4-bb5b-3161645f9d54
# ╠═a1c2a4c5-0482-4154-98d1-b3c0069879c4
# ╠═b142ec07-b624-4a41-bdc4-92ab829d597b
# ╠═75182139-2fe9-409b-bea7-aa413acfb776
# ╠═821d6df7-6597-48e0-9899-c28df62a5ce6
# ╟─24fc0350-b075-11eb-2b87-3b27ae8f9ca9
